beta[j] ~ dnorm(0, 1/1e6)
}
# variance
prec ~ dgamma(5/2, 5*10/2)
sigma2 = 1/prec
sigma = sqrt(sigma2)
} "
# input data for jags model: list containing all the input data with proper name.
# In this case, the input data are n, y, X and p
X = cbind(rep(1, n), x) # design matrix
data_jags = list(y = y, X = X)
# set parameters that we want to control
params = c("beta", "sigma")
# set function for initial values: it must return a list
init_fun = function() {
inits = list("beta" = rnorm(2,0, 100),
"prec" = rgamma(1, 1, 1))
}
# compile model
model = jags.model(file = textConnection(model_string),
data = data_jags,
inits = init_fun,
n.chains = 3)
# burn in of the chains
update(model, 1000)
# samples using mcmc chains
mcmc_chains = coda.samples(model = model,
variable.names = params,
n.iter = 5000,
thin = 10)
summary(mcmc_chains)
# combine samples
mcmc_combined = do.call(rbind, mcmc_chains)
# traceplots
plot(mcmc_chains)
# Gelman-Rubin diagnostics (R hat)
gelman.diag(mcmc_chains)
# Effective sample size
effectiveSize(mcmc_chains)
# Effective sample size
effectiveSize(model)
# compile model
model = jags.model(file = textConnection(model_string),
data = data_jags,
inits = init_fun,
n.chains = 3)
# burn in of the chains
adapt(model, 100)
update(model, 1000)
model
summary(model)
# samples using mcmc chains
mcmc_chains = coda.samples(model = model,
variable.names = params,
n.iter = 5000,
thin = 10)
summary(mcmc_chains)
# compile and initialize model
model = jags.model(file = textConnection(model_string),
data = data_jags,
inits = init_fun,
n.chains = 3)
# burn in of the chains
adapt(model, 10)
# burn in of the chains
adapt(model, 1)
# compile and initialize model
model = jags.model(file = textConnection(model_string),
data = data_jags,
inits = init_fun,
n.chains = 3)
# burn in of the chains
adapt(model, 1)
# burn in of the chains
update(model, 1000)
adapt(model, 1)
model_string = "
data {
D <- dim(X)
p = D[2]
n = D[1]
}
model {
var y[n], X[n, p]
# Likelihood
mu = X %*% beta
y ~ dnorm(mu, prec)
# Priors
# regression coefficients
beta ~ dnorm(0, 1/1e6)
# variance
prec ~ dgamma(5/2, 5*10/2)
sigma2 = 1/prec
sigma = sqrt(sigma2)
} "
# compile and initialize model
model = jags.model(file = textConnection(model_string),
data = data_jags,
inits = init_fun,
n.chains = 3)
model_string = "
data {
D <- dim(X)
p = D[2]
n = D[1]
}
model {
var y[n], X[n, p];
# Likelihood
mu = X %*% beta
y ~ dnorm(mu, prec)
# Priors
# regression coefficients
beta ~ dnorm(0, 1/1e6)
# variance
prec ~ dgamma(5/2, 5*10/2)
sigma2 = 1/prec
sigma = sqrt(sigma2)
} "
# compile and initialize model
model = jags.model(file = textConnection(model_string),
data = data_jags,
inits = init_fun,
n.chains = 3)
model_string = "
data {
D <- dim(X)
p = D[2]
n = D[1]
}
model {
var y[n]
# Likelihood
mu = X %*% beta
y ~ dnorm(mu, prec)
# Priors
# regression coefficients
beta ~ dnorm(0, 1/1e6)
# variance
prec ~ dgamma(5/2, 5*10/2)
sigma2 = 1/prec
sigma = sqrt(sigma2)
} "
# compile and initialize model
model = jags.model(file = textConnection(model_string),
data = data_jags,
inits = init_fun,
n.chains = 3)
# burn in of the chains
update(model, 1000)
# compile and initialize model
model = jags.model(file = textConnection(model_string),
data = data_jags,
inits = init_fun,
n.chains = 3)
model_string = "
data {
D <- dim(X)
p = D[2]
n = D[1]
}
var y[n], X[n, p];
model {
# Likelihood
mu = X %*% beta
y ~ dnorm(mu, prec)
# Priors
# regression coefficients
beta ~ dnorm(0, 1/1e6)
# variance
prec ~ dgamma(5/2, 5*10/2)
sigma2 = 1/prec
sigma = sqrt(sigma2)
} "
# compile and initialize model
model = jags.model(file = textConnection(model_string),
data = data_jags,
inits = init_fun,
n.chains = 3)
model_string = "
data {
D <- dim(X)
p = D[2]
n = D[1]
var y[n], X[n, p];
}
model {
# Likelihood
mu = X %*% beta
y ~ dnorm(mu, prec)
# Priors
# regression coefficients
beta ~ dnorm(0, 1/1e6)
# variance
prec ~ dgamma(5/2, 5*10/2)
sigma2 = 1/prec
sigma = sqrt(sigma2)
} "
# compile and initialize model
model = jags.model(file = textConnection(model_string),
data = data_jags,
inits = init_fun,
n.chains = 3)
model_string = "
data {
D <- dim(X)
p = D[2]
n = D[1]
var {
y[n], X[n, p]
}
model {
# Likelihood
mu = X %*% beta
y ~ dnorm(mu, prec)
# Priors
# regression coefficients
beta ~ dnorm(0, 1/1e6)
# variance
prec ~ dgamma(5/2, 5*10/2)
sigma2 = 1/prec
sigma = sqrt(sigma2)
} "
# compile and initialize model
model = jags.model(file = textConnection(model_string),
data = data_jags,
inits = init_fun,
n.chains = 3)
model_string = "
data {
D <- dim(X)
p = D[2]
n = D[1]
}
model {
# Likelihood
mu = X %*% beta
y ~ dnorm(mu, prec)
# Priors
# regression coefficients
beta ~ dnorm(0, 1/1e6)
# variance
prec ~ dgamma(5/2, 5*10/2)
sigma2 = 1/prec
sigma = sqrt(sigma2)
} "
# compile and initialize model
model = jags.model(file = textConnection(model_string),
data = data_jags,
inits = init_fun,
n.chains = 3)
model_string = "
data {
D <- dim(X)
p = D[2]
n = D[1]
}
model {
# Likelihood
mu = X %*% beta
y ~ dnorm(mu, prec)
# Priors
# regression coefficients
for (j = 1:p) {
beta ~ dnorm(0, 1/1e6)
}
# variance
prec ~ dgamma(5/2, 5*10/2)
sigma2 = 1/prec
sigma = sqrt(sigma2)
} "
# compile and initialize model
model = jags.model(file = textConnection(model_string),
data = data_jags,
inits = init_fun,
n.chains = 3)
model_string = "
data {
D <- dim(X)
p = D[2]
n = D[1]
}
model {
# Likelihood
mu = X %*% beta
y ~ dnorm(mu, prec)
# Priors
# regression coefficients
for (j in 1:p) {
beta ~ dnorm(0, 1/1e6)
}
# variance
prec ~ dgamma(5/2, 5*10/2)
sigma2 = 1/prec
sigma = sqrt(sigma2)
} "
# compile and initialize model
model = jags.model(file = textConnection(model_string),
data = data_jags,
inits = init_fun,
n.chains = 3)
model_string = "
data {
D <- dim(X)
p = D[2]
n = D[1]
}
model {
# Likelihood
mu = X %*% beta
y ~ dnorm(mu, prec)
# Priors
# regression coefficients
for (j in 1:p) {
beta[j] ~ dnorm(0, 1/1e6)
}
# variance
prec ~ dgamma(5/2, 5*10/2)
sigma2 = 1/prec
sigma = sqrt(sigma2)
} "
# compile and initialize model
model = jags.model(file = textConnection(model_string),
data = data_jags,
inits = init_fun,
n.chains = 3)
model_string = "
data {
D <- dim(X)
p = D[2]
n = D[1]
}
model {
# Likelihood
y ~ dnorm(mu, prec)
mu = X %*% beta
# Priors
# regression coefficients
for (j in 1:p) {
beta[j] ~ dnorm(0, 1/1e6)
}
# variance
prec ~ dgamma(5/2, 5*10/2)
sigma2 = 1/prec
sigma = sqrt(sigma2)
} "
# compile and initialize model
model = jags.model(file = textConnection(model_string),
data = data_jags,
inits = init_fun,
n.chains = 3)
install.packages("pkgbuild")
rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
install.packages("jsonlite",type="source")
install.packages("pkgbuild")
rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
install.packages("pkgbuild")
rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
Sys.getenv("BINPREF")
Sys.getenv("BINPREF")
PATH="${RTOOLS40_HOME}\usr\bin;${PATH}"
PATH="${RTOOLS40_HOME}/usr/bin;${PATH}"
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
std_norm_data = rnorm(1000, 0, 1)
setwd("~/R/samplePackage")
sample_data = data.frame("x" = x, "y" = y)
# simulate data
set.seed(123)
n = 1000
x = rnorm(n, mean = 3, sd = 1)
y = 2*x + rnorm(n, mean = 0, sd = 1)
sample_data = data.frame("x" = x, "y" = y)
usethis::use_data("sample_data")
?use_data
usethis::use_data(sample_data)
load("~/R/samplePackage/data/sample_data.rda")
usethis::use_data_raw("example")
## code to prepare `example` dataset goes here
set.seed(123)
n = 1000
x = rnorm(n, mean = 3, sd = 1)
y = 2*x + rnorm(n, mean = 0, sd = 1)
example = data.frame("x" = x, "y" = y)
usethis::use_data(example, overwrite = TRUE)
## code to prepare `example` dataset goes here
set.seed(123)
n = 1000
x = rnorm(n, mean = 3, sd = 1)
y = 2*x + rnorm(n, mean = 0, sd = 1)
example = data.frame("x" = x, "y" = y)
usethis::use_data(example, overwrite = TRUE, internal = TRUE)
## code to prepare `example` dataset goes here
set.seed(123)
n = 1000
x = rnorm(n, mean = 3, sd = 1)
y = 2*x + rnorm(n, mean = 0, sd = 1)
#' Example dataset to be included in a Package
#'
#' @format A data frame with columns:
#' \describe{
#'  \item{x}{normally distributed predictor}
#'  \item{y}{Outcome variable obtained with the relation \eqn{y = 2x + \epsilon}}
#' }
"example"
example = data.frame("x" = x, "y" = y)
usethis::use_data(example, overwrite = TRUE)
## code to prepare `example` dataset goes here
set.seed(123)
n = 1000
x = rnorm(n, mean = 3, sd = 1)
y = 2*x + rnorm(n, mean = 0, sd = 1)
example = data.frame("x" = x, "y" = y)
usethis::use_data(example, overwrite = TRUE)
## code to prepare `example` dataset goes here
set.seed(123)
n = 1000
x = rnorm(n, mean = 3, sd = 1)
y = 2*x + rnorm(n, mean = 0, sd = 1)
example = data.frame("x" = x, "y" = y)
usethis::use_data(example, overwrite = TRUE)
install.packages("roxygen2")
getwd()
library(roxygen2)
library(devtools)
document()
## code to prepare `example` dataset goes here
set.seed(123)
n = 1000
x = rnorm(n, mean = 3, sd = 1)
y = 2*x + rnorm(n, mean = 0, sd = 1)
example = data.frame("x" = x, "y" = y)
usethis::use_data(example, overwrite = TRUE)
install()
library(samplePackage)
?example
use_data_raw("example")
use_data_raw("example")
set.seed(123)
n = 1000
x = rnorm(n, mean = 3, sd = 1)
y = 2*x + rnorm(n, mean = 0, sd = 1)
example = data.frame("x" = x, "y" = y)
usethis::use_data(example, overwrite = TRUE)
getwd()
usethis::use_testthat()
library(samplePackage)
vignette(samplePackage)
vignette("samplePackage")
devtools::load_all(".")
library(samplePackage)
vignette("samplePackage")
vignette("car")
vignette("stan")
library(rstan)
vignette("rstan")
library(samplePackage)
vignette(package = "samplePackage")
browseVignettes("samplePackage")
devtools::load_all(".")
library(samplePackage)
browseVignettes("samplePackage")
library(samplePackage)
browseVignettes("samplePackage")
vignette(package = "samplePackage")
devtools::build()
library(samplePackage)
browseVignettes("samplePackage")
vignette(package = "samplePackage")
library(samplePackage)
vignette(package = "samplePackage")
devtools::build_vignettes()
devtools::build_vignettes()
library(samplePackage)
vignette(package = "samplePackage")
vignette("Tutorial", package = "samplePackage")
browseVignettes("samplePackage")
devtools::install()
library(samplePackage)
browseVignettes("samplePackage")
devtools::build(".")
devtools::install()
library(samplePackage)
vignette(topic = "Tutorial", package = "samplePackage")
vignette(package = "samplePackage")
devtools::build(".")
devtools::build_vignettes()
library(samplePackage)
vignette(package = "samplePackage")
library(samplePackage)
vignette(package = "samplePackage")
library(samplePackage)
vignette(package = "samplePackage")
library(samplePackage)
vignette(package = "samplePackage")
library(samplePackage)
vignette(package = "samplePackage")
library(samplePackage)
vignette(package = "samplePackage")
devtools::build_vignettes()
vignette(package = "samplePackage")
vignette(package = "samplePackage")
library(samplePackage)
vignette(package = "samplePackage")
